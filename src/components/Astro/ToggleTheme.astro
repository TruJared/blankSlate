---
import { Icon } from "astro-icon/components";
import {themeNames} from "@utils/themeNames"


let selectedTheme = themeNames[0];
---

<div class="relative inline-block mx-0 px-0">
	<div
		class="bg-theme-secondary text-xs text-theme-secondary tracking-widest font-semibold rounded-md min-w-32 border border-theme-secondary shadow shadow-theme-primary m-0"
	>
		<Icon
			name="ph:paint-brush-broad-duotone"
			size="24"
			class="absolute left-1 top-1 sm:top-3 sm:left-1 rotate-[135deg]"
		/>
		<button
			id="theme-button"
			aria-haspopup="listbox"
			aria-expanded="false"
			class="w-full text-left pl-8 pr-2 pt-2 pb-1 sm:pt-0 sm:pb-0 h6 tracking-widest font-semibold"
		>
			{selectedTheme.replace("theme-", "")}
		</button>
		<ul
			id="theme-dropdown"
			role="listbox"
			tabindex="-1"
			class="absolute left-0 top-14 w-full z-10 hidden bg-theme-primary text-theme-primary border border-theme-primary m-0 rounded-md shadow-md shadow-theme-grey p-1"
		>
			{
				themeNames.map((name) => (
					<li
						role="option"
						tabindex="0"
						class="theme-option py-1 hover:text-theme-secondary hover:bg-theme-secondary cursor-pointer rounded h6 mx-0 pr-0 pl-2 first:pt-2 last:pb-2"
						data-theme={name}
					>
						{name.replace("theme-", "").replaceAll("-", " ")}
					</li>
				))
			}
		</ul>
	</div>
</div>

<script is:inline>

	var setTheme = (theme) => {
		var target = document.documentElement;
		target.classList.add(theme);
		document.getElementById("theme-button").textContent = theme
			.replace("theme-", "")
			.replaceAll("-", " ");
		target.classList.forEach((className) => {
			if (className.startsWith("theme-") && className !== theme) {
				target.classList.remove(className);
			}
		});
		localStorage.setItem("theme", theme);
	};

	var currentTheme = localStorage.getItem("theme");
	if (currentTheme) {
		setTheme(currentTheme);
	} else {
		var prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
		var prefersLight = window.matchMedia("(prefers-color-scheme: light)").matches;
		setTheme(prefersDark ? "theme-dark" : prefersLight ? "theme-light" : "theme-Alkaline");
	}


	function setupThemeToggle() {
		var themeDropdown = document.querySelector("#theme-dropdown");
		var themeButton = document.getElementById("theme-button");
		var options = themeDropdown.querySelectorAll(".theme-option");

		if (!themeDropdown || !themeButton) return;

		function toggleDropdown() {
			var expanded = themeButton.getAttribute("aria-expanded") === "true";
			themeButton.setAttribute("aria-expanded", !expanded);
			themeDropdown.classList.toggle("hidden");
			if (!expanded) {
				options[0].focus();
			}
		}

		function selectTheme(option) {
			var theme = option.getAttribute("data-theme");
			setTheme(theme);
			toggleDropdown();
			themeButton.focus();
		}

		themeButton.addEventListener("click", toggleDropdown);

		themeButton.addEventListener("keydown", function (e) {
			if (e.key === "ArrowDown" || e.key === "Enter" || e.key === " ") {
				e.preventDefault();
				toggleDropdown();
			}
		});

		options.forEach((option, index) => {
			option.addEventListener("click", () => selectTheme(option));

			option.addEventListener("keydown", (e) => {
				if (e.key === "Enter" || e.key === " ") {
					e.preventDefault();
					selectTheme(option);
				} else if (e.key === "ArrowDown") {
					e.preventDefault();
					options[(index + 1) % options.length].focus();
				} else if (e.key === "ArrowUp") {
					e.preventDefault();
					options[(index - 1 + options.length) % options.length].focus();
				} else if (e.key === "Escape") {
					toggleDropdown();
					themeButton.focus();
				}
			});
		});

		document.addEventListener("click", (e) => {
			if (
				!themeDropdown.contains(e.target) &&
				!themeButton.contains(e.target)
			) {
				themeDropdown.classList.add("hidden");
				themeButton.setAttribute("aria-expanded", "false");
			}
		});
	}

	setupThemeToggle();

	document.addEventListener("astro:after-swap", setupThemeToggle);

	document.addEventListener("astro:page-load", () => {
		var currentTheme = localStorage.getItem("theme");
		if (currentTheme) {
			setTheme(currentTheme);
		}
	});
</script>
