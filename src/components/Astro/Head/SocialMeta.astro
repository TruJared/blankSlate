---
import { SITE } from "@config";
import Favicon from "@components/Astro/Head/Favicon.astro";

export interface Props {
	title?: string;
	description?: string;
	type?: "website" | "article" | "profile" | "book" | "product";
	image?: string;
  favicon?: string;
	canonicalURL?: string;
	siteName?: string;
	locale?: string;
	author?: string;
	publishedTime?: string;
	modifiedTime?: string;
	keywords?: string[];
	section?: string;
	twitterCardType?: "summary_large_image" | "summary";
}

const {
	title = SITE.title,
	description = SITE.description,
	type = "website",
	image = SITE.ogImage,
	favicon = SITE.favicon,
	canonicalURL = Astro.url.href,
	siteName = SITE.title,
	locale = "en_US",
	author = SITE.author,
	publishedTime,
	modifiedTime,
	keywords,
	section,
	twitterCardType = "summary_large_image",
} = Astro.props;

// Ensure image is a full URL
const imageUrl = new URL(image ?? "", Astro.site);

// JSON-LD Data
let jsonLdData;

switch (type) {
	case "article":
		jsonLdData = {
			"@context": "https://schema.org",
			"@type": "Article",
			headline: title,
			image: imageUrl.href,
			author: {
				"@type": "Person",
				name: author,
			},
			publisher: {
				"@type": "Organization",
				name: siteName,
				...(SITE.logoSrc && {
					logo: {
						"@type": "ImageObject",
						url: new URL(SITE.logoSrc, Astro.site),
					},
				}),
			},
			datePublished: publishedTime,
			dateModified: modifiedTime || publishedTime,
			description: description,
			mainEntityOfPage: {
				"@type": "WebPage",
				"@id": canonicalURL,
			},
		};
		break;
	case "product":
		jsonLdData = {
			"@context": "https://schema.org",
			"@type": "Product",
			name: title,
			image: imageUrl.href,
			description: description,
			// Add more product-specific properties here if needed
		};
		break;
	default:
		jsonLdData = {
			"@context": "https://schema.org",
			"@type": "WebPage",
			name: title,
			description: description,
			url: canonicalURL,
		};
}
// Remove undefined properties
Object.entries(jsonLdData).forEach(([key, value]) => {
	if (value === undefined) {
		delete jsonLdData[key as keyof typeof jsonLdData];
	}
});
---

<title>{title}</title>
<meta charset="utf-8" />

<meta name="description" content={description} />
<link rel="canonical" href={canonicalURL} />
<link rel="sitemap" href="/sitemap-index.xml" />
<Favicon url={favicon} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content={type} />
<meta property="og:url" content={canonicalURL} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={imageUrl} />
<meta property="og:image:alt" content={title} />
<meta property="og:site_name" content={siteName} />
<meta property="og:locale" content={locale} />
{
	publishedTime && (
		<meta property="article:published_time" content={publishedTime} />
	)
}
{
	modifiedTime && (
		<meta property="article:modified_time" content={modifiedTime} />
	)
}
{keywords && keywords.map((tag) => <meta property="article:tag" content={tag} />)}
{section && <meta property="article:section" content={section} />}

<!-- Twitter -->
<meta name="twitter:card" content={twitterCardType} />
<meta name="twitter:title" content={title} />
<meta name="twitter:description" content={description} />
<meta name="twitter:image" content={imageUrl} />
<meta name="twitter:image:alt" content={title} />

<!-- JSON-LD -->
<script is:inline type="application/ld+json" set:html={JSON.stringify(jsonLdData)} />
