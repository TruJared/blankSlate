---
export interface Props {
  title: string;
  initiallyExpanded?: boolean;
  customClass?: string | Array<{ [key: string]: boolean | string }>;
}

const { title, initiallyExpanded = false, customClass } = Astro.props;

const id = title.toLowerCase().replace(/\s+/g, '-');
---
<!-- todo optional custom class as well and general clean up -->
<div class:list={[
  "toggle-collapse  max-w-[600px]",
  customClass,
]}>
  <button
    class="toggle-button"
    aria-expanded={initiallyExpanded ? "true" : "false"}
    aria-controls={id}
  >
    {title}
    <span class="icon" aria-hidden="true">â–¼</span>
  </button>
  <div
    id={id}
    class="content m-0 p-0"
    data-expanded={initiallyExpanded}
  >
    <div class="content-inner m-0 p-0">
      <slot />
    </div>
  </div>
</div>

<style>

  .toggle-button {
    width: 100%;
    text-align: left;
    padding: 1rem 0;
    border: none;
    cursor: pointer;
    display: flex;
    align-items: center;
  }
  .content {
    overflow: hidden;
    transition: max-height 0.5s cubic-bezier(0.47, 0, 0.745, 0.715);
    max-height: 0;
  }
  .content[data-expanded="true"] {
    max-height: var(--content-height, 1000px);
  }

  .icon {
    transition: transform 0.3s ease;
    margin-left: 0.25rem;
  }
  [aria-expanded="true"] .icon {
    transform: rotate(180deg);
  }
</style>

<script>
  document.addEventListener('astro:page-load', () => {
    const toggleButtons = document.querySelectorAll('.toggle-button');
    toggleButtons.forEach(button => {
      button.addEventListener('click', () => {
        const expanded = button.getAttribute('aria-expanded') === 'true';
        button.setAttribute('aria-expanded', String(!expanded));
        const content = button.nextElementSibling;
        if (content instanceof HTMLElement) {
          const contentInner = content.querySelector('.content-inner');
        if (contentInner instanceof HTMLElement) {
          content.style.setProperty('--content-height', `${contentInner.scrollHeight}px`);
        }
          content.setAttribute('data-expanded', String(!expanded));
        }
      });
    });
  });
</script>
